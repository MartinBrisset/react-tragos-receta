{"version":3,"sources":["components/Header.js","context/CategoriasContext.js","context/RecetasContext.js","components/Formulario.js","context/ModalContext.js","components/Receta.js","components/ListaRecetas.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriasProvider","props","useState","categorias","guardarCategorias","useEffect","a","async","axios","get","data","drinks","obtenerCategorias","Provider","value","children","RecetasContext","RecetasProvider","recetas","guardarRecetas","nombre","categoria","busqueda","buscarRecetas","consultar","guardarConsultar","url","resultado","obtenerRecetas","Formulario","guardarBusqueda","useContext","obtenerDatosReceta","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","map","key","strCategory","ModalContext","ModalProvider","idreceta","guardarIdReceta","informacion","guardarReceta","obtenerReceta","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","Receta","receta","modalStyle","open","setOpen","classes","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","ingredientes","i","push","mostrarIngredientes","ListaRecetas","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91df9bd4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return ( \n        <header className=\"bg-alert\">\n            <h1>Busca Recetas de Bebidas</h1>\n        </header>\n     );\n}\n \nexport default Header;","import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Crear el Context\nexport const CategoriasContext = createContext();\n\n// Provider es donde se encuentran las funciones y state\nconst CategoriasProvider = (props) => {\n\n    // crear el state del Context\n    const [categorias, guardarCategorias] = useState([]);\n\n    // ejecutar el llamado a la api\n    useEffect(() => {\n        const obtenerCategorias = async () => {\n            const url = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\n\n            const categorias = await axios.get(url);\n\n            guardarCategorias(categorias.data.drinks);\n        }\n        obtenerCategorias();\n    }, []);\n\n    return (\n        <CategoriasContext.Provider\n            value={{\n                categorias\n            }}\n        >\n            {props.children}\n        </CategoriasContext.Provider>\n    )\n}\nexport default CategoriasProvider;","import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n\nexport const RecetasContext = createContext();\n\nconst RecetasProvider = (props) => {\n\n    const [recetas, guardarRecetas] = useState([]);\n    const [busqueda, buscarRecetas] = useState({\n        nombre: '',\n        categoria: ''\n    });\n    const [ consultar, guardarConsultar] = useState(false);\n\n    const { nombre, categoria} = busqueda;\n\n    useEffect(() => {\n        if(consultar) {\n            const obtenerRecetas = async () => {\n                const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${nombre}&c=${categoria}`;\n\n                const resultado = await axios.get(url);\n\n                // console.log(resultado.data.drinks);\n                guardarRecetas(resultado.data.drinks);\n            }\n\n            obtenerRecetas();\n        }\n\n    }, [busqueda]);\n\n    return ( \n        <RecetasContext.Provider\n            value={{\n                recetas,\n                buscarRecetas, \n                guardarConsultar\n            }}\n        >\n            {props.children}\n        </RecetasContext.Provider>\n     );\n}\n \nexport default RecetasProvider;","import React, { useContext, useState } from 'react';\nimport { CategoriasContext } from '../context/CategoriasContext';\nimport { RecetasContext } from '../context/RecetasContext';\n\nconst Formulario = () => {\n\n    const [ busqueda, guardarBusqueda ] = useState({\n        nombre: '',\n        categoria: ''\n    });\n\n    const { categorias } = useContext(CategoriasContext);\n    const { buscarRecetas, guardarConsultar } = useContext(RecetasContext );\n\n    // función para leer los contenidos\n    const obtenerDatosReceta = e => {\n        guardarBusqueda({\n            ...busqueda,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    return ( \n        <form\n            className=\"col-12\"\n            onSubmit={ e => {\n                e.preventDefault();\n                buscarRecetas(busqueda);\n                guardarConsultar(true);\n            }}\n        >\n            <fieldset className=\"text-center\">\n                <legend>Busca bebidas por Categoría o Ingrediente</legend>\n            </fieldset>\n\n            <div className=\"row mt-4\">\n                <div className=\"col-md-4\">\n                    <input\n                        name=\"nombre\"\n                        className=\"form-control\"\n                        type=\"text\"\n                        placeholder=\"Buscar por Ingrediente\"\n                        onChange={obtenerDatosReceta}\n                    />\n                </div>\n                <div className=\"col-md-4\">\n                    <select \n                        className=\"form-control\"\n                        name=\"categoria\"\n                        onChange={obtenerDatosReceta}\n                    >\n                        <option value=\"\">-- Selecciona Categoría --</option>\n                        {categorias.map(categoria => (\n                            <option \n                                key={categoria.strCategory} \n                                value={categoria.strCategory} \n                            >{categoria.strCategory}</option>\n                        ))}\n                    </select>\n                </div>\n\n                <div className=\"col-md-4\">\n                    <input\n                        type=\"submit\"\n                        className=\"btn btn-block btn-primary\"\n                        value=\"Buscar Bebidas\"\n                    />\n                </div>\n            </div>\n        </form>\n     );\n}\n \nexport default Formulario;","import React, { createContext, useEffect, useState} from 'react';\nimport axios from 'axios';\n\n// crear el context\nexport const ModalContext = createContext();\n\nconst ModalProvider = (props) => {\n\n    // state del provider\n    const [ idreceta, guardarIdReceta ] = useState(null);\n    const [ informacion, guardarReceta] = useState({});\n\n    // una vez que tenemos una receta, llamar la api\n    useEffect( () => {\n        const obtenerReceta = async () => {\n            if(!idreceta) return;\n\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idreceta}`;\n\n            const resultado = await axios.get(url);\n\n            guardarReceta(resultado.data.drinks[0]);\n        }\n        obtenerReceta();\n    }, [idreceta]);\n\n    return ( \n        <ModalContext.Provider\n            value={{\n                informacion,\n                guardarIdReceta,\n                guardarReceta\n            }}\n        >\n            {props.children}\n        </ModalContext.Provider>\n     );\n}\n \nexport default ModalProvider;","import React, { useContext, useState } from 'react';\nimport { ModalContext } from '../context/ModalContext';\n\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction getModalStyle() {\n    const top = 50 ;\n    const left = 50;\n  \n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n      position: 'absolute',\n      width: 450,\n      backgroundColor: theme.palette.background.paper,\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nconst Receta = ({receta}) => {\n\n    // Configuración del modal de material-ui\n    const [ modalStyle ] = useState(getModalStyle);\n    const [open, setOpen] = useState(false);\n\n    const classes = useStyles();\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n\n    // extraer los valores del context\n    const { informacion, guardarIdReceta, guardarReceta } = useContext(ModalContext);\n\n    // Muestra y formatea los ingredientes\n    const mostrarIngredientes = informacion => {\n        let ingredientes = [];\n        for(let i = 1; i < 16; i++){\n            if( informacion[`strIngredient${i}`] ) {\n                ingredientes.push(\n                    <li> { informacion[`strIngredient${i}`] }  { informacion[`strMeasure${i}`] }</li>\n                )\n            }\n        }\n\n        return ingredientes;\n    }\n\n    return ( \n        <div className=\"col-md-4 mb-3\">\n            <div className=\"card\">\n                 <h2 className=\"card-header\">{receta.strDrink}</h2>\n\n                 <img className=\"card-img-top\" src={receta.strDrinkThumb} alt={`Imagen de ${receta.strDrink}`} />\n\n                 <div className=\"card-body\">\n                     <button\n                        type=\"button\"\n                        className=\"btn btn-block btn-primary\"\n                        onClick={() => {\n                            guardarIdReceta(receta.idDrink);\n                            handleOpen();\n                        }}\n                     >\n                         Ver Receta\n                     </button>\n\n\n                     <Modal\n                        open={open}\n                        onClose={() => {\n                            guardarIdReceta(null);\n                            guardarReceta({})\n                            handleClose();\n                        }}\n                     >\n                         <div style={modalStyle} className={classes.paper}>\n                            <h2>{informacion.strDrink}</h2>\n                            <h3 className=\"mt-4\">Instrucciones</h3>\n                            <p>\n                                {informacion.strInstructions}\n                            </p>\n\n                            <img className=\"img-fluid my-4\" src={informacion.strDrinkThumb} />\n\n                            <h3>Ingredientes y cantidades</h3>\n                            <ul>\n                                { mostrarIngredientes(informacion) }\n                            </ul>\n                         </div>\n                     </Modal>\n                 </div>\n            </div>\n        </div>\n     );\n}\n \nexport default Receta;","import React, { useContext } from 'react';\nimport Receta from './Receta';\nimport { RecetasContext } from '../context/RecetasContext';\n\nconst ListaRecetas = () => {\n\n    // extraer las recetas\n    const { recetas } = useContext(RecetasContext);\n\n    return ( \n        <div className=\"row mt-5\">\n            {recetas.map(receta => (\n                <Receta \n                    key={receta.idDrink}\n                    receta={receta}\n                />\n            ))}\n        </div>\n     );\n}\n \nexport default ListaRecetas;","import React, { Fragment } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport ListaRecetas from './components/ListaRecetas';\n\nimport CategoriasProvider from './context/CategoriasContext';\nimport RecetasProvider from './context/RecetasContext';\nimport ModalProvider from './context/ModalContext';\n\nfunction App() {\n  return (\n      <CategoriasProvider>\n        <RecetasProvider>\n          <ModalProvider>\n              <Header />\n\n              <div className=\"container mt-5\">\n                  <div className=\"row\">\n                      <Formulario />\n                  </div>\n\n                  <ListaRecetas />\n              </div>\n\n          </ModalProvider>\n        </RecetasProvider>\n      </CategoriasProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}